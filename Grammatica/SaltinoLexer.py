# Generated from Saltino.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,
        4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
        18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,
        21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,
        25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,
        30,1,30,5,30,166,8,30,10,30,12,30,169,9,30,1,31,4,31,172,8,31,11,
        31,12,31,173,1,32,4,32,177,8,32,11,32,12,32,178,1,32,1,32,1,33,1,
        33,1,33,1,33,5,33,187,8,33,10,33,12,33,190,9,33,1,33,1,33,1,34,1,
        34,1,34,1,34,5,34,198,8,34,10,34,12,34,201,9,34,1,34,1,34,1,34,1,
        34,1,34,1,199,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,10,10,13,13,211,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,
        0,0,3,75,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,81,1,0,0,0,11,83,1,
        0,0,0,13,85,1,0,0,0,15,87,1,0,0,0,17,90,1,0,0,0,19,95,1,0,0,0,21,
        102,1,0,0,0,23,107,1,0,0,0,25,112,1,0,0,0,27,114,1,0,0,0,29,116,
        1,0,0,0,31,118,1,0,0,0,33,120,1,0,0,0,35,122,1,0,0,0,37,124,1,0,
        0,0,39,127,1,0,0,0,41,130,1,0,0,0,43,135,1,0,0,0,45,141,1,0,0,0,
        47,145,1,0,0,0,49,148,1,0,0,0,51,150,1,0,0,0,53,153,1,0,0,0,55,155,
        1,0,0,0,57,158,1,0,0,0,59,160,1,0,0,0,61,163,1,0,0,0,63,171,1,0,
        0,0,65,176,1,0,0,0,67,182,1,0,0,0,69,193,1,0,0,0,71,72,5,100,0,0,
        72,73,5,101,0,0,73,74,5,102,0,0,74,2,1,0,0,0,75,76,5,40,0,0,76,4,
        1,0,0,0,77,78,5,41,0,0,78,6,1,0,0,0,79,80,5,44,0,0,80,8,1,0,0,0,
        81,82,5,123,0,0,82,10,1,0,0,0,83,84,5,125,0,0,84,12,1,0,0,0,85,86,
        5,61,0,0,86,14,1,0,0,0,87,88,5,105,0,0,88,89,5,102,0,0,89,16,1,0,
        0,0,90,91,5,101,0,0,91,92,5,108,0,0,92,93,5,115,0,0,93,94,5,101,
        0,0,94,18,1,0,0,0,95,96,5,114,0,0,96,97,5,101,0,0,97,98,5,116,0,
        0,98,99,5,117,0,0,99,100,5,114,0,0,100,101,5,110,0,0,101,20,1,0,
        0,0,102,103,5,104,0,0,103,104,5,101,0,0,104,105,5,97,0,0,105,106,
        5,100,0,0,106,22,1,0,0,0,107,108,5,116,0,0,108,109,5,97,0,0,109,
        110,5,105,0,0,110,111,5,108,0,0,111,24,1,0,0,0,112,113,5,94,0,0,
        113,26,1,0,0,0,114,115,5,43,0,0,115,28,1,0,0,0,116,117,5,45,0,0,
        117,30,1,0,0,0,118,119,5,42,0,0,119,32,1,0,0,0,120,121,5,47,0,0,
        121,34,1,0,0,0,122,123,5,37,0,0,123,36,1,0,0,0,124,125,5,58,0,0,
        125,126,5,58,0,0,126,38,1,0,0,0,127,128,5,91,0,0,128,129,5,93,0,
        0,129,40,1,0,0,0,130,131,5,116,0,0,131,132,5,114,0,0,132,133,5,117,
        0,0,133,134,5,101,0,0,134,42,1,0,0,0,135,136,5,102,0,0,136,137,5,
        97,0,0,137,138,5,108,0,0,138,139,5,115,0,0,139,140,5,101,0,0,140,
        44,1,0,0,0,141,142,5,97,0,0,142,143,5,110,0,0,143,144,5,100,0,0,
        144,46,1,0,0,0,145,146,5,111,0,0,146,147,5,114,0,0,147,48,1,0,0,
        0,148,149,5,33,0,0,149,50,1,0,0,0,150,151,5,60,0,0,151,152,5,61,
        0,0,152,52,1,0,0,0,153,154,5,60,0,0,154,54,1,0,0,0,155,156,5,61,
        0,0,156,157,5,61,0,0,157,56,1,0,0,0,158,159,5,62,0,0,159,58,1,0,
        0,0,160,161,5,62,0,0,161,162,5,61,0,0,162,60,1,0,0,0,163,167,7,0,
        0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,
        0,0,167,168,1,0,0,0,168,62,1,0,0,0,169,167,1,0,0,0,170,172,7,2,0,
        0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,
        0,174,64,1,0,0,0,175,177,7,3,0,0,176,175,1,0,0,0,177,178,1,0,0,0,
        178,176,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,6,32,0,0,
        181,66,1,0,0,0,182,183,5,47,0,0,183,184,5,47,0,0,184,188,1,0,0,0,
        185,187,8,4,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,
        188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,192,6,33,0,0,
        192,68,1,0,0,0,193,194,5,47,0,0,194,195,5,42,0,0,195,199,1,0,0,0,
        196,198,9,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,200,1,0,0,0,
        199,197,1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,203,5,42,0,0,
        203,204,5,47,0,0,204,205,1,0,0,0,205,206,6,34,0,0,206,70,1,0,0,0,
        6,0,167,173,178,188,199,1,6,0,0
    ]

class SaltinoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    ID = 31
    INT = 32
    WS = 33
    COMMENT = 34
    BLOCK_COMMENT = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'('", "')'", "','", "'{'", "'}'", "'='", "'if'", "'else'", 
            "'return'", "'head'", "'tail'", "'^'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'::'", "'[]'", "'true'", "'false'", "'and'", 
            "'or'", "'!'", "'<='", "'<'", "'=='", "'>'", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "WS", "COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "ID", "INT", "WS", 
                  "COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "Saltino.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


